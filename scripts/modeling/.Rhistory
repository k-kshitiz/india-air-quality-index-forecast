}
sorted_grid <- grid_table[order(grid_table$bic), ]
return(head(sorted_grid, 5))
}
arima_grid_search(Bengaluru_xts_train, "bengaluru_xts_train", maxp = 5, maxq = 5)
arima_grid_search <- function (data, name, maxp, maxd = 2, maxq) {
grid_table <- data.frame(data = character(),
order = character(),
aicc = numeric(),
bic = numeric())
for (p in 0:maxp) {
for (d in 0:maxd) {
for (q in 0:maxq) {
arima_model <- Arima(data$AQI, order = c(p, d, q))
order <- paste("(", p, ",", d, ",", q, ")", sep = "")
AICC <- arima_model$aicc
BIC <- arima_model$bic
row_data <- list(data = name, order = order, aicc = AICC, bic = BIC)
grid_table <- do.call(rbind, list(grid_table, row_data))
}
}
}
sorted_grid <- grid_table[order(grid_table$bic), ]
return(head(sorted_grid, 5))
}
arima_grid_search(bengaluru_xts_train, "bengaluru_xts_train", maxp = 5, maxq = 5)
arima_grid_search(lucknow_xts_train, "lucknow_xts_train", maxp = 3, maxq = 5)
arima_grid_search(delhi_xts_train, "delhi_xts_train", maxp = 5, maxq = 5)
arima_grid_search(chennai_xts_train, "dhennai_xts_train", maxp = 5, maxq = 5)
arima_grid_search <- function (data, name, maxp, maxd = 2, maxq) {
grid_table <- data.frame(data = character(),
order = character(),
aicc = numeric(),
bic = numeric())
for (p in 0:maxp) {
for (d in 0:maxd) {
for (q in 0:maxq) {
arima_model <- Arima(data$AQI, order = c(p, d, q))
order <- paste("(", p, ",", d, ",", q, ")", sep = "")
AICC <- arima_model$aicc
BIC <- arima_model$bic
row_data <- list(data = name, order = order, aicc = AICC, bic = BIC)
grid_table <- do.call(rbind, list(grid_table, row_data))
}
}
}
sorted_grid <- grid_table[order(grid_table$bic), ]
return(head(sorted_grid, 5))
}
arima_grid_search(bengaluru_xts_train, "bengaluru_xts_train", maxp = 5, maxq = 5)
arima_grid_search(lucknow_xts_train, "lucknow_xts_train", maxp = 3, maxq = 5)
arima_grid_search(delhi_xts_train, "delhi_xts_train", maxp = 5, maxq = 5)
arima_grid_search(chennai_xts_train, "chennai_xts_train", maxp = 5, maxq = 5)
for (city in cities_xts) {
city_train <- paste0(city, "_train")
city_diff <- paste0(city, "_train_diff")
diff_data <- diff(get(city_train), differences = 1)
diff_data <- diff_data[-1, ]
assign(city_diff, diff_data)
}
for (city in cities_xts) {
eda_ts(get(paste0(city, "_train_diff")), paste0(city, "_train_diff"))
}
AG2 <- function (train, test) {
train_data <- get(train)
test_data <- get(test)
normalized_ts <- (train_data$AQI - mean(train_data$AQI)) / sd(train_data$AQI)
if (train == 'bengaluru_xts_train_diff') {
p_arma <- 1
q_arma <- 1
} else if (train == 'lucknow_xts_train_diff') {
p_arma <- 0
q_arma <- 4
} else if (train == 'delhi_xts_train_diff') {
p_arma <- 1
q_arma <- 2
} else {
p_arma <- 1
q_arma <- 1
}
formula <- bquote(~ arma(.(p_arma), .(q_arma)) + garch(1, 1))
model <- garchFit(formula = formula, data = normalized_ts, trace = FALSE)
# order <- paste0("ARMA(", p_arma, ",", q_arma, ")")
summary <- summary(model)
BIC <- summary[["ics"]][["BIC"]]
stat_values <- summary$stat_tests # Standardized Residuals Tests
Jarque_Bera_R_pv <- stat_values[10]
Shapiro_Wilk_pv <- stat_values[11]
Ljung_Box_R_Q10_pv <- stat_values[12]
Ljung_Box_R_Q15_pv <- stat_values[13]
Ljung_Box_R_Q20_pv <- stat_values[14]
Ljung_Box_R2_Q10_pv <- stat_values[15]
Ljung_Box_R2_Q15_pv <- stat_values[16]
Ljung_Box_R2_Q20_pv <- stat_values[17]
LM_Arch_pv <- stat_values[18]
forecast <- predict(model, n.ahead = 30)
value <- forecast$meanForecast * sd(train_data$AQI) + mean(train_data$AQI)
rmse <- rmse(as.numeric(test_data$AQI), value)
mae <- mae(as.numeric(test_data$AQI), value)
mape <- mape(as.numeric(test_data$AQI), value)
amape <- mean(100 * abs(as.numeric(test_data$AQI) - value)/as.numeric(test_data$AQI))
return(list(model = model,
summary = summary,
# order = order,
BIC = round(BIC, 4),
Jarque_Bera_R_pv = round(Jarque_Bera_R_pv, 4),
Shapiro_Wilk_pv = round(Shapiro_Wilk_pv, 4),
Ljung_Box_R_Q10_pv = round(Ljung_Box_R_Q10_pv, 4),
Ljung_Box_R_Q15_pv = round(Ljung_Box_R_Q15_pv, 4),
Ljung_Box_R_Q20_pv = round(Ljung_Box_R_Q20_pv, 4),
Ljung_Box_R2_Q10_pv = round(Ljung_Box_R2_Q10_pv, 4),
Ljung_Box_R2_Q15_pv = round(Ljung_Box_R2_Q15_pv, 4),
Ljung_Box_R2_Q20_pv = round(Ljung_Box_R2_Q20_pv, 4),
LM_Arch_pv = round(LM_Arch_pv, 4),
forecast = value,
RMSE = round(rmse, 4),
MAE = round(mae, 4),
MAPE = round(mape, 4),
AMAPE = round(amape, 4)
))
}
df_AG_2 <- data.frame(
bengaluru_xts = numeric(14),
lucknow_xts = numeric(14),
delhi_xts = numeric(14),
chennai_xts = numeric(14))
for (city in cities_xts) {
result <- AG2(paste0(city, "_train_diff"), paste0(city, "_test"))
df_col <- c(
result$Jarque_Bera_R_pv,
result$Shapiro_Wilk_pv,
result$Ljung_Box_R_Q10_pv,
result$Ljung_Box_R_Q15_pv,
result$Ljung_Box_R_Q20_pv,
result$Ljung_Box_R2_Q10_pv,
result$Ljung_Box_R2_Q15_pv,
result$Ljung_Box_R2_Q20_pv,
result$LM_Arch_pv,
result$BIC,
result$RMSE,
result$MAE,
result$MAPE,
result$AMAPE)
df_AG_2[city] <- df_col
time_index <- index(get(paste0(city, "_test")))
plot <- plot_forecast_vs_real(result$forecast, get(paste0(city, "_test"))$AQI,
time_index, city)
plot_list[[city]] <- plot
}
rownames(df_AG_2) <- c("Jarque-Bera (R) pv",
"Shapiro-Wilk (R) pv",
"Ljung_Box (R, Q = 10) pv",
"Ljung_Box (R, Q = 15) pv",
"Ljung_Box (R, Q = 20) pv",
"Ljung_Box (R^2, Q = 10) pv",
"Ljung_Box (R^2, Q = 15) pv",
"Ljung_Box (R^2, Q = 20) pv",
"LM Arch pv",
"BIC",
"RMSE",
"MAE",
"MAPE",
"AMAPE")
df_AG_2
do.call(grid.arrange, c(plot_list, ncol = 2))
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.height = 6)
setwd("~/Documents/University of Chicago/ADSP 31006 Time Series Analysis & Forecasting/Project/india-air-quality-index-forecast/india-air-quality-index-forecast/scripts/modeling")
options(width = 200)
Sys.setlocale("LC_TIME", "English")
library(readr)
library(xts)
library(forecast)
library(tseries)
library(fGarch)
library(TSA)
library(Metrics)
library(prophet)
library(dplyr)
cities <- c('bengaluru', 'lucknow', 'delhi', 'chennai')
path <- '/Users/kshitizsahay/Documents/University of Chicago/ADSP 31006 Time Series Analysis & Forecasting/Project/india-air-quality-index-forecast/india-air-quality-index-forecast/data/preprocessed_dataset/daily/'
for (city in cities) {
file_name <- paste0(path, city, "_day_filled.csv")
assign(city, read.csv(file_name))
print(city)
print(rbind(head(get(city), 3), tail(get(city), 3)))
}
for (city in cities) {
data <- get(city)
data$Date <- as.Date(data$Date)
city_xts <- xts(data[,-1], order.by = data$Date)
assign(paste0(city, "_xts"), city_xts)
print(city)
print(rbind(head(get(paste0(city, "_xts")), 3), tail(get(paste0(city, "_xts")), 3)))
}
cities <- c('bengaluru', 'lucknow', 'delhi', 'chennai')
cities_xts <- c('bengaluru_xts', 'lucknow_xts', 'delhi_xts', 'chennai_xts')
plot(bengaluru_xts$AQI)
plot(lucknow_xts$AQI)
plot(delhi_xts$AQI)
plot(chennai_xts$AQI)
eda_ts <- function (xts, city_name) {
acf(xts$AQI, main = paste("ACF for", city_name))
pacf(xts$AQI, main = paste("PACF for", city_name))
}
for (city in cities_xts) {
eda_ts(get(city), city)
}
adf.test(bengaluru_xts$AQI)
kpss.test(bengaluru_xts$AQI)
eacf(bengaluru_xts$AQI)
adf.test(chennai_xts$AQI)
kpss.test(chennai_xts$AQI)
eacf(chennai_xts$AQI)
adf.test(delhi_xts$AQI)
kpss.test(delhi_xts$AQI)
eacf(delhi_xts$AQI)
adf.test(lucknow_xts$AQI)
kpss.test(lucknow_xts$AQI)
eacf(lucknow_xts$AQI)
for (city in cities_xts) {
plot(decompose(ts(get(city)$AQI, frequency = 365)), col.main = "white")
title(main = paste("Decomposition of additive time series for", city))
}
for (city in cities_xts) {
train_data <- window(get(city),
start = as.Date("2015-01-01"),
end = as.Date("2020-06-01"))
test_data <- window(get(city),
start = as.Date("2020-06-02"),
end = as.Date("2020-07-01"))
assign(paste0(city, "_train"), train_data)
assign(paste0(city, "_test"), test_data)
}
# Convert xts objects to dataframes
df_train <- data.frame(date = index(lucknow_xts_train), coredata(lucknow_xts_train))
df_test <- data.frame(date = index(lucknow_xts_test), coredata(lucknow_xts_test))
# Rename columns for Prophet
df_train <- df_train %>% rename(ds = date, y = AQI)
df_test <- df_test %>% rename(ds = date, y = AQI)
# Initialize the Prophet model
m <- prophet(daily.seasonality=TRUE)
# Add the additional regressors
m <- add_regressor(m, 'PM2.5')
m <- add_regressor(m, 'NO')
m <- add_regressor(m, 'NO2')
m <- add_regressor(m, 'CO')
# Fit the model
m <- fit.prophet(m, df_train)
# Make a future dataframe only for the required periods (30 in this case)
past <- df_train[, c('ds', 'PM2.5', 'NO', 'NO2', 'CO')]
# Forecast
forecast0 <- predict(m, past)
# Plot the forecast
plot(m, forecast0)
prophet_plot_components(m, forecast0)
# Make a future dataframe only for the required periods (30 in this case)
future <- df_test[, c('ds', 'PM2.5', 'NO', 'NO2', 'CO')]
# Forecast
forecast <- predict(m, future)
# Plot the forecast
plot(m, forecast)
prophet_plot_components(m, forecast)
# Extract actual values from the test set
actual <- df_test$y
# Extract predicted values from the forecast
predicted <- forecast$yhat
# Calculate metrics
rmse_value <- rmse(actual, predicted)
mse_value <- mse(actual, predicted)
mape_value <- mape(actual, predicted)
mae_value <- mae(actual, predicted)
amape_value <- mean(abs((actual - predicted) / ((actual + predicted) / 2))) * 100
# Print the metrics
cat("RMSE: ", rmse_value, "\n")
cat("MSE: ", mse_value, "\n")
cat("MAPE: ", mape_value, "\n")
cat("MAE: ", mae_value, "\n")
cat("AMAPE: ", amape_value, "\n")
# Calculate Residuals
residuals <- actual - predicted
# Calculate Residual Sum of Squares (RSS)
rss <- sum(residuals^2)
# Number of observations and number of parameters
n <- length(actual)
k <- length(m$params)
# Calculate Log-Likelihood
log_likelihood <- -n/2 * (log(2 * pi) + log(rss/n) + 1)
# Calculate AIC
aic <- 2 * k - 2 * log_likelihood
# Calculate BIC
bic <- log(n) * k - 2 * log_likelihood
# Print the metrics
cat("AIC: ", aic, "\n")
cat("BIC: ", bic, "\n")
# Convert xts objects to dataframes
df_train <- data.frame(date = index(chennai_xts_train), coredata(chennai_xts_train))
df_test <- data.frame(date = index(chennai_xts_test), coredata(chennai_xts_test))
# Rename columns for Prophet
df_train <- df_train %>% rename(ds = date, y = AQI)
df_test <- df_test %>% rename(ds = date, y = AQI)
# Initialize the Prophet model
m <- prophet(daily.seasonality=TRUE)
# Add the additional regressors
m <- add_regressor(m, 'PM2.5')
m <- add_regressor(m, 'NO')
m <- add_regressor(m, 'NO2')
m <- add_regressor(m, 'CO')
# Fit the model
m <- fit.prophet(m, df_train)
# Make a future dataframe only for the required periods (30 in this case)
past <- df_train[, c('ds', 'PM2.5', 'NO', 'NO2', 'CO')]
# Forecast
forecast0 <- predict(m, past)
# Plot the forecast
plot(m, forecast0)
prophet_plot_components(m, forecast0)
# Make a future dataframe only for the required periods (30 in this case)
future <- df_test[, c('ds', 'PM2.5', 'NO', 'NO2', 'CO')]
# Forecast
forecast <- predict(m, future)
# Plot the forecast
plot(m, forecast)
prophet_plot_components(m, forecast)
# Extract actual values from the test set
actual <- df_test$y
# Extract predicted values from the forecast
predicted <- forecast$yhat
# Calculate metrics
rmse_value <- rmse(actual, predicted)
mse_value <- mse(actual, predicted)
mape_value <- mape(actual, predicted)
mae_value <- mae(actual, predicted)
amape_value <- mean(abs((actual - predicted) / ((actual + predicted) / 2))) * 100
# Print the metrics
cat("RMSE: ", rmse_value, "\n")
cat("MSE: ", mse_value, "\n")
cat("MAPE: ", mape_value, "\n")
cat("MAE: ", mae_value, "\n")
cat("AMAPE: ", amape_value, "\n")
# Calculate Residuals
residuals <- actual - predicted
# Calculate Residual Sum of Squares (RSS)
rss <- sum(residuals^2)
# Number of observations and number of parameters
n <- length(actual)
k <- length(m$params)
# Calculate Log-Likelihood
log_likelihood <- -n/2 * (log(2 * pi) + log(rss/n) + 1)
# Calculate AIC
aic <- 2 * k - 2 * log_likelihood
# Calculate BIC
bic <- log(n) * k - 2 * log_likelihood
# Print the metrics
cat("AIC: ", aic, "\n")
cat("BIC: ", bic, "\n")
# Convert xts objects to dataframes
df_train <- data.frame(date = index(delhi_xts_train), coredata(delhi_xts_train))
df_test <- data.frame(date = index(delhi_xts_test), coredata(delhi_xts_test))
# Rename columns for Prophet
df_train <- df_train %>% rename(ds = date, y = AQI)
df_test <- df_test %>% rename(ds = date, y = AQI)
# Initialize the Prophet model
m <- prophet(daily.seasonality=TRUE)
# Add the additional regressors
m <- add_regressor(m, 'PM2.5')
m <- add_regressor(m, 'NO')
m <- add_regressor(m, 'NO2')
m <- add_regressor(m, 'CO')
# Fit the model
m <- fit.prophet(m, df_train)
# Make a future dataframe only for the required periods (30 in this case)
past <- df_train[, c('ds', 'PM2.5', 'NO', 'NO2', 'CO')]
# Forecast
forecast0 <- predict(m, past)
# Plot the forecast
plot(m, forecast0)
prophet_plot_components(m, forecast0)
# Make a future dataframe only for the required periods (30 in this case)
future <- df_test[, c('ds', 'PM2.5', 'NO', 'NO2', 'CO')]
# Forecast
forecast <- predict(m, future)
# Plot the forecast
plot(m, forecast)
prophet_plot_components(m, forecast)
# Extract actual values from the test set
actual <- df_test$y
# Extract predicted values from the forecast
predicted <- forecast$yhat
# Calculate metrics
rmse_value <- rmse(actual, predicted)
mse_value <- mse(actual, predicted)
mape_value <- mape(actual, predicted)
mae_value <- mae(actual, predicted)
amape_value <- mean(abs((actual - predicted) / ((actual + predicted) / 2))) * 100
# Print the metrics
cat("RMSE: ", rmse_value, "\n")
cat("MSE: ", mse_value, "\n")
cat("MAPE: ", mape_value, "\n")
cat("MAE: ", mae_value, "\n")
cat("AMAPE: ", amape_value, "\n")
# Calculate Residuals
residuals <- actual - predicted
# Calculate Residual Sum of Squares (RSS)
rss <- sum(residuals^2)
# Number of observations and number of parameters
n <- length(actual)
k <- length(m$params)
# Calculate Log-Likelihood
log_likelihood <- -n/2 * (log(2 * pi) + log(rss/n) + 1)
# Calculate AIC
aic <- 2 * k - 2 * log_likelihood
# Calculate BIC
bic <- log(n) * k - 2 * log_likelihood
# Print the metrics
cat("AIC: ", aic, "\n")
cat("BIC: ", bic, "\n")
# Convert xts objects to dataframes
df_train <- data.frame(date = index(bengaluru_xts_train), coredata(bengaluru_xts_train))
df_test <- data.frame(date = index(bengaluru_xts_test), coredata(bengaluru_xts_test))
# Rename columns for Prophet
df_train <- df_train %>% rename(ds = date, y = AQI)
df_test <- df_test %>% rename(ds = date, y = AQI)
# Initialize the Prophet model
m <- prophet(daily.seasonality=TRUE)
# Add the additional regressors
m <- add_regressor(m, 'PM2.5')
m <- add_regressor(m, 'NO')
m <- add_regressor(m, 'NO2')
m <- add_regressor(m, 'CO')
# Fit the model
m <- fit.prophet(m, df_train)
# Make a future dataframe only for the required periods (30 in this case)
past <- df_train[, c('ds', 'PM2.5', 'NO', 'NO2', 'CO')]
# Forecast
forecast0 <- predict(m, past)
# Plot the forecast
plot(m, forecast0)
prophet_plot_components(m, forecast0)
# Make a future dataframe only for the required periods (30 in this case)
future <- df_test[, c('ds', 'PM2.5', 'NO', 'NO2', 'CO')]
# Forecast
forecast <- predict(m, future)
# Plot the forecast
plot(m, forecast)
prophet_plot_components(m, forecast)
# Extract actual values from the test set
actual <- df_test$y
# Extract predicted values from the forecast
predicted <- forecast$yhat
# Calculate metrics
rmse_value <- rmse(actual, predicted)
mse_value <- mse(actual, predicted)
mape_value <- mape(actual, predicted)
mae_value <- mae(actual, predicted)
amape_value <- mean(abs((actual - predicted) / ((actual + predicted) / 2))) * 100
# Print the metrics
cat("RMSE: ", rmse_value, "\n")
cat("MSE: ", mse_value, "\n")
cat("MAPE: ", mape_value, "\n")
cat("MAE: ", mae_value, "\n")
cat("AMAPE: ", amape_value, "\n")
# Calculate Residuals
residuals <- actual - predicted
# Calculate Residual Sum of Squares (RSS)
rss <- sum(residuals^2)
# Number of observations and number of parameters
n <- length(actual)
k <- length(m$params)
# Calculate Log-Likelihood
log_likelihood <- -n/2 * (log(2 * pi) + log(rss/n) + 1)
# Calculate AIC
aic <- 2 * k - 2 * log_likelihood
# Calculate BIC
bic <- log(n) * k - 2 * log_likelihood
# Print the metrics
cat("AIC: ", aic, "\n")
cat("BIC: ", bic, "\n")
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.height = 6)
setwd("~/Documents/University of Chicago/ADSP 31006 Time Series Analysis & Forecasting/Project/india-air-quality-index-forecast/scripts/modeling")
options(width = 200)
Sys.setlocale("LC_TIME", "English")
library(readr)
library(xts)
library(forecast)
library(tseries)
library(fGarch)
library(TSA)
library(Metrics)
library(lmtest)
library(gridExtra)
library(ggplot2)
library(cowplot)
library(gridGraphics)
library(grid)
cities <- c('bengaluru', 'lucknow', 'delhi', 'chennai')
path <- '/Users/kshitizsahay/Documents/University of Chicago/ADSP 31006 Time Series Analysis & Forecasting/Project/india-air-quality-index-forecast/data/preprocessed_dataset/daily/'
for (city in cities) {
file_name <- paste0(path, city, "_day_filled.csv")
assign(city, read.csv(file_name))
print(rbind(head(get(city), 3), tail(get(city), 3)))
}
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.height = 6)
setwd("~/Documents/University of Chicago/ADSP 31006 Time Series Analysis & Forecasting/Project/india-air-quality-index-forecast/scripts/modeling")
options(width = 200)
cities <- c('bengaluru', 'lucknow', 'delhi', 'chennai')
path <- '/Users/kshitizsahay/Documents/University of Chicago/ADSP 31006 Time Series Analysis & Forecasting/Project/india-air-quality-index-forecast/data/preprocessed_dataset/daily/'
for (city in cities) {
file_name <- paste0(path, city, "_day_filled.csv")
assign(city, read.csv(file_name))
print(city)
print(rbind(head(get(city), 3), tail(get(city), 3)))
}
